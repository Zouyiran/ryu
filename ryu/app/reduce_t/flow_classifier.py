#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np

'''
###reduce_t###
--> flow classifier
1) src-dst flow --> create svm sample
2) elephant flow
'''

class FlowClassifier(object):

    # singletone
    _instance = None

    def __init__(self):
        super(FlowClassifier, self).__init__()
        self.active_sample = dict()
        self.data = [[2, 44938.7, 108, 3.0],[2, 1012.0, 92, 3.0],[2, 3168.0, 96, 1.0],[4, 1650.0, 192, 3.0],[2, 134462.0, 101, 1.0],
                     [3, 1518.0, 92, 3.0],[4, 554.4, 170, 6.0],[2, 44776.7, 98, 3.0],[4, 67165.0, 199, 3.0],[2, 137712.0, 108, 1.0],
                     [6, 134090.0, 265, 9.0],[2, 0, 98, 0],[1, 1324.0, 40, 2.0],[4, 44757.3, 176, 3.0],[5, 1353.0, 214, 10.0],
                     [4, 66971.0, 178, 3.0],[2, 3258.0, 98, 1.0],[6, 134528.0, 293, 3.0],[2, 825.0, 100, 4.0],[2, 134330.0, 98, 1.0],
                     [14, 66773.0, 507, 7.0],[6, 134198.0, 288, 3.0],[1, 629.0, 38, 4.0],[4, 67099.0, 94, 3.0],[5, 1353.0, 214, 10.0],

                     [2, 0, 122, 0],[2, 44864.7, 102, 3.0],[1, 66905.0, 41, 2.0],[2, 44842.7, 102, 3.0],[2, 0, 23, 0],
                     [2, 1716.0, 104, 2.0],[4, 379.5, 178, 8.0],[4, 23500.7, 209, 6.0],[4, 34806.5, 209, 5.0],[8, 67165.0, 398, 9.0],
                     [1, 0, 50, 0],[4, 3294.0, 182, 2.0],[6, 68153.0, 323, 3.0],[4, 19190.0, 199, 8.0],[12, 134198.0, 603, 8.0],
                     [4, 958.0, 208, 5.0],[4, 16742.75, 178, 8.0],[4, 1144.0, 204, 3.0],[4, 880.5, 202, 4.0],[8, 67231.0, 389, 9.0],
                     [2, 16824.25, 102, 8.0],[12, 44842.7, 600, 8.0],[2, 19115.7, 89, 7.0],[4, 16774.75, 178, 8.0],[8, 22421.3, 393, 9.0],

                     [6, 1268.0, 312, 7.0],[4, 33599.0, 204, 5.0],[4, 433.7, 192, 8.0],[2, 22410.3, 101, 6.0],[8, 3264.0, 388, 8.0],
                     [2, 19673.1, 108, 7.0],[4, 44842.7, 205, 4.0],[4, 1056.0, 184, 3.0],[4, 45882.0, 211, 7.0],[4, 1797.0, 204, 6.0],
                     [6, 44820.7, 316, 7.0],[10, 137316.0, 393, 8.0],[2, 44938.7, 110, 3.0],[6, 3638.0, 300, 9.0],[2, 1752.0, 104, 2.0],
                     [6, 134330.0, 303, 9.0],[2, 134594.0, 103, 1.0],[4, 44827.3, 189, 4.0],[2, 648.4, 97, 5.0],[4, 16784.0, 176, 8.0],
                     [2, 550.0, 100, 6.0],[2, 19208.9, 100, 7.0],[6, 1910.0, 320, 2.0],[4, 703.0, 210, 6.0],[2, 374.0, 102, 9.0],

                     [8, 1584.0, 384, 9.0],[6, 33467.0, 284, 5.0],[2, 572.4, 86, 6.0],[2, 22344.3, 89, 6.0],[4, 13922.6, 193, 10.0],
                     [4, 16791.25, 196, 8.0],[6, 1398.0, 264, 9.0],[3, 66509.0, 118, 7.0],[4, 33582.5, 204, 9.0],[6, 26852.8, 286, 6.0],
                     [6, 693.0, 266, 7.0],[1, 648.4, 49, 5.0],[2, 27208.4, 104, 5.0],[2, 709.5, 86, 4.0],[6, 67099.0, 263, 5.0],
                     [4, 676.5, 188, 8.0],[14, 45105.3, 673, 9.0],[4, 425.8, 194, 10.0],[6, 66967.0, 266, 10.0],[4, 429.0, 204, 9.0],
                     [6, 1464.0, 290, 10.0],[14, 16799.5, 670, 9.0],[3, 895.0, 112, 7.0],[6, 17038.25, 323, 8.0],[10, 66740.0, 393, 9.0],

                     [2, 0, 90, 0],[6, 3168.0, 308, 9.0],[6, 67033.0, 291, 10.0],[6, 3096.0, 280, 5.0],[4, 33500.0, 172, 4.0],
                     [6, 873.0, 300, 7.0],[4, 16810.75, 205, 9.0],[4, 594.4, 184, 9.0],[4, 44622.7, 195, 8.0],[4, 3036.0, 196, 6.0],
                     [4, 946.0, 192, 8.0],[6, 134330.0, 311, 9.0],[6, 26936.8, 304, 8.0],[4, 33467.0, 187, 8.0],[4, 532.0, 202, 7.0],
                     [4, 500.6, 107, 7.0],[10, 66806.0, 391, 9.0],[4, 22388.3, 201, 7.0],[4, 134198.0, 195, 6.0],[4, 19650.9, 112, 7.0],
                     [4, 26791.6, 189, 9.0],[4, 44644.7, 175, 4.0],[4, 831.0, 204, 9.0],[6, 1530.0, 262, 5.0],[6, 33483.5, 264, 7.0],

                     [2, 0, 82, 0],[4, 133810.0, 154, 9.0],[6, 759.0, 266, 9.0],[4, 1014.0, 174, 6.0],[8, 2952.0, 374, 8.0],
                     [2, 158268.0, 149, 6.0],[4, 66620.5, 218, 8.0],[10, 44581.3, 373, 9.0],[6, 2862.0, 250, 8.0],[4, 26773.6, 180, 8.0],
                     [2, 19142.9, 85, 7.0],[3, 22257.7, 102, 9.0],[4, 1431.0, 166, 9.0],[2, 1006.0, 90, 4.0],[3, 22169.7, 100, 9.0]]
        self.target = [0,0,0,1,0,
                       0,1,0,0,0,
                       0,0,0,0,1,
                       0,0,0,0,0,
                       1,0,0,0,1,

                       0,0,0,0,0,
                       0,1,0,0,1,
                       0,0,0,0,1,
                       1,0,1,1,1,
                       0,1,0,0,1,

                       1,0,1,0,1,
                       0,0,1,0,1,
                       1,1,0,1,0,
                       0,0,0,0,0,
                       0,0,1,1,0,

                       1,1,0,0,0,
                       0,1,0,0,1,
                       1,0,0,0,0,
                       1,1,1,0,1,
                       1,1,0,1,1,

                       0,1,0,1,0,
                       1,0,1,0,1,
                       1,0,1,0,1,
                       1,1,0,0,0,
                       0,0,1,1,1,

                       0,0,1,1,1,
                       0,0,1,1,0,
                       0,0,1,0,0]
        # self.data = [  [1, 3, 230, 0], [2, 96, 6336, 6], [2, 94, 277132, 8], [4, 87, 267934, 1], [4, 86, 5676, 1],
        #                [2, 73, 267018, 10], [2, 98, 268660, 8], [2, 12, 12424, 0], [1, 28, 1868, 1], [2, 202, 2897012, 6],
        #                [1, 29, 133018, 8], [2, 90, 5940, 0], [1, 30, 133084, 5], [1, 28, 1856, 5], [4, 16, 1184, 4],
        #                [2, 109, 269390, 6], [1, 1, 74, 2], [1, 0, 0, 0], [5, 271, 763334, 2], [4, 0, 0, 0],
        #                [4, 208, 538096, 6], [11, 590, 956516, 4], [4, 556, 6852464, 3], [3, 110, 269440, 0], [2, 107, 138178, 0],
        #                [5, 267, 673170, 4], [11, 579, 562522, 4], [2, 100, 6592, 2], [2, 1, 74, 0], [9, 377, 942530, 0],
        #                [7, 273, 673482, 0], [5, 60, 4028, 1], [4, 161, 403914, 0], [6, 222, 538988, 0], [10, 323, 545726, 0],
        #                [2, 101, 6698, 0], [3, 104, 6872, 0], [9, 318, 283164, 0], [4, 204, 13448, 1], [4, 171, 11274, 0],
        #                [6, 296, 19568, 0], [4, 210, 13964, 6], [2, 102, 268940, 7], [1, 3, 222, 2], [3, 108, 269272, 0],
        #                [2, 106, 7020, 8], [1, 1, 66, 0], [3, 165, 404110, 2], [3, 162, 403968, 6], [4, 203, 13398, 1],
        #                [1, 56, 134744, 12], [1, 52, 134536, 1], [1, 55, 134602, 10], [2, 110, 269420, 8], [4, 208, 538096, 4],
        #                [2, 102, 6724, 7], [4, 199, 13150, 2], [6, 303, 19966, 2], [3, 154, 10660, 2], [6, 327, 808118, 8],
        #                [7, 271, 673342, 0], [4, 556, 298896, 3], [4, 53, 134610, 0], [6, 307, 20246, 0], [5, 255, 16810, 7],
        #                [2, 54, 134656, 0], [4, 209, 538186, 2], [1, 55, 3658, 12], [4, 199, 13114, 0], [4, 54, 134676, 0],
        #                [5, 256, 16888, 1], [1, 53, 3510, 9], [6, 255, 16810, 0], [6, 325, 807990, 1], [5, 253, 16682, 1],
        #                [4, 161, 401934, 0], [4, 202, 13340, 6], [4, 206, 538012, 7], [4, 214, 538504, 2], [2, 102, 6724, 0],
        #                [4, 107, 269278, 0], [6, 324, 807956, 1], [4, 105, 269162, 0], [2, 52, 134536, 0], [1, 54, 134676, 9],
        #                [2, 0, 0, 0], [2, 101, 6670, 0], [4, 203, 13394, 0], [4, 198, 496172, 1], [3, 52, 3456, 1],
        #                [4, 222, 539020, 6], [2, 112, 269568, 9], [1, 50, 3288, 9], [4, 202, 13332, 5], [4, 152, 10032, 0],
        #                [3, 146, 9612, 6], [6, 305, 806762, 0], [8, 1, 74, 0], [1, 52, 134528, 5], [2, 99, 6530, 7],
        #                [4, 208, 284632, 5], [4, 196, 12888, 7], [4, 209, 538242, 5], [4, 198, 537500, 5], [4, 199, 537534, 4],
        #                [1, 51, 3414, 5], [8, 9, 546, 1], [3, 150, 272068, 6], [3, 55, 134722, 1], [8, 204, 537880, 0],
        #                [2, 59, 137898, 7]]
        #
        # self.target = [  0, 0, 0, 0, 1,
        #                  0, 0, 0, 0, 0,
        #                  0, 1, 0, 0, 1,
        #                  0, 0, 0, 0, 1,
        #                  0, 1, 0, 0, 0,
        #                  0, 1, 0, 0, 1,
        #                  1, 1, 0, 1, 1,
        #                  0, 1, 1, 1, 1,
        #                  1, 0, 0, 0, 0,
        #                  0, 0, 0, 0, 1,
        #                  0, 0, 0, 0, 0,
        #                  0, 1, 1, 0, 0,
        #                  1, 0, 0, 1, 0,
        #                  0, 0, 0, 1, 0,
        #                  1, 0, 1, 1, 1,
        #                  0, 0, 0, 0, 0,
        #                  0, 1, 0, 0, 0,
        #                  1, 0, 1, 0, 0,
        #                  0, 0, 0, 0, 1,
        #                  0, 1, 1, 0, 0,
        #                  0, 0, 0, 0, 0,
        #                  0, 1, 0, 0, 1,
        #                  0]
    @staticmethod
    def get_instance():
        if not FlowClassifier._instance:
            FlowClassifier._instance = FlowClassifier()
        return FlowClassifier._instance

    def create_sample(self, dpid_to_flow):
        '''
        {'nw_dst': u'10.0.0.2', 'byte_count': 54, 'duration_sec': 2,
        'packet_count': 1, 'idle_timeout': 10, 'nw_src': u'10.0.0.10'},
        '''
        active_sample = dict()
        for dpid in dpid_to_flow:
            for flow in dpid_to_flow[dpid]:
                src_ip = flow["nw_src"]
                dst_ip = flow["nw_dst"]
                active_sample.setdefault((src_ip, dst_ip),[0,0,0,0])
                # flow count
                active_sample[(src_ip,dst_ip)][0] += 1
                # max speed
                duration_sec = float(flow["duration_sec"])
                if duration_sec > 0.0:
                    bw = int(flow["byte_count"])/duration_sec
                    if bw > active_sample[(src_ip,dst_ip)][1]:
                        active_sample[(src_ip,dst_ip)][1] = bw
                # packet count
                active_sample[(src_ip,dst_ip)][2] += int(flow["packet_count"])
                # byte count
                # active_sample[(src_ip,dst_ip)][2] += int(flow["byte_count"])
                # duration
                duration = float(flow["duration_sec"])
                if duration > active_sample[(src_ip,dst_ip)][3]:
                    active_sample[(src_ip,dst_ip)][3] = duration
        return active_sample

    def get_data(self, data):
        data_array = np.asarray(data)
        return data_array

    def get_target(self,target):
        target_array = np.asarray(target)
        return target_array